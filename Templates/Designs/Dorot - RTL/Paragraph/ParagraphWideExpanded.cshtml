@{
string videoCode = GetString("Item.VideoCode");
string id = GetString("Item.Id");
string downloadLink = GetString("Item.DownloadLink");
}

<div class="light-bg new-bg" @RenderAnchor()>
    <div class="container">
        <div class="col-xs-12">
            <div class="row">
                <div class="perspective-box">
                    <div class="col-xs-12 col-sm-6 perspective-img">
					  @if(!string.IsNullOrEmpty(videoCode)){
					  
					  <a href="#" class="video noPrint" data-toggle="modal" data-target="#popup@(id)">@Translate("watch","WATCH")</a>
					  } else {
                      <a href="@downloadLink" class="download noPrint">@Translate("download","DOWNLOAD")</a>
					  }
                      @RenderImage()
                    </div>
                    <div class="col-xs-12 col-sm-6 perspective-details">
                        @RenderSubHeading()
                        @RenderHeading()
                        @RenderButton()
                        <div class="text-wrap">
                              @RenderText()
                        </div>
                    </div>
                </div>              
            </div>
        </div>
    </div>
  </div>
 
@SnippetStart("modals")
@if(!string.IsNullOrEmpty(videoCode)){
<!-- Modal -->
<div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" id="popup@(id)" aria-labelledby="myLargeModalLabel">
	<div class="modal-dialog modal-lg" role="document" style="max-width: 670px;">
		<div class="modal-content">
	    	<div class="modal-header">
	        	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	        </div>
	        <div class="modal-body">
	        @if (GetString("Item.Video_Type") =="vimeo") {  
	        	<iframe src="https://player.vimeo.com/video/@(videoCode)" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
				<script type="text/javascript">
					$(function() {
						$('#popup@(id)').on('hidden.bs.modal', function (e) {
						// do something...
						var source = $('#popup@(id) iframe').attr('src');
						$('#popup@(id) iframe').attr('src','');
						$('#popup@(id) iframe').attr('src',source);																			  
						});
					});
				</script>
			} else {
          	
	        <iframe class="youtube-content" width="640" height="360" src='https://www.youtube.com/embed/@(videoCode)?version=3&enablejsapi=1' frameborder="0" allowfullscreen></iframe>
			<script type="text/javascript">
				$(function() {
					$('#popup@(id)').on('hidden.bs.modal', function (e) {
					// do something...
                      $('#popup@(id) iframe.youtube-content').each(function(){
                          this.contentWindow.postMessage('{"event":"command","func":"' + 'stopVideo' + '","args":""}', '*')
                      });
                      //$(' video').attr("src", $("#popup@(id) video").attr("src"));
					});
				});
			</script>
	         } 
	        </div>      
	     </div>
	 </div>
</div>
}
@SnippetEnd("modals") 


@helper RenderHeading()
{
  if (GetBoolean("Item.ShowTitle") != false){
    if (!string.IsNullOrEmpty(GetString("Item.Title")))
    {
      <h4> 
          @GetString("Item.Title") 
      </h4>
    }
  }
}

@helper RenderAnchor() {
	if (!string.IsNullOrEmpty(GetString("Item.Title")))
		{
		<text>id='@GetString("Item.Title").Replace(" ","-")'</text>

		}
}
@helper RenderButton()
{ 
  var Url = GetString("Item.Link");

  if (!string.IsNullOrEmpty(Url) && !string.IsNullOrEmpty(GetString("Item.LinkText")))
  { 
    if (Url.Contains("http"))
    {
      <text>
          <a href="@GetString("Item.Link")" target="_blank" class="author">@GetString("Item.LinkText") ></a>
      </text>
    }
    else if (Url.Contains("/"))
    {
      <text>
          <a href="@GetString("Item.Link")" class="author" download>@GetString("Item.LinkText") ></a>
      </text>
    }
    else
    {
      <text>
          <a href="@GetString("Item.Link")" class="author">@GetString("Item.LinkText") ></a>
      </text>
    }
  }
}

@helper RenderSubHeading()
{
  if (!string.IsNullOrEmpty(GetString("Item.Subtitle")))
  {
    <span>
      @GetString("Item.Subtitle")
	</span>
  }
}

@helper RenderText()
{
  if (!string.IsNullOrWhiteSpace(GetString("Item.Text"))){
    <div class="figure">
      @GetString("Item.Text")
    </div>
  }
}

@helper RenderModule()
{
  @GetString("ParagraphModule")
}

@helper RenderImage()
{
  if (!string.IsNullOrEmpty(GetString("Item.Image")))
  {
    var image = System.Web.HttpContext.Current.Server.UrlEncode(GetString("Item.Image"));
    
    <!-- Choosing the smallest possible width that will work with responsive sizes -->
    string optimizedwidth = "1280";

    switch (GetString("Item.Width")){
      case "12":
        optimizedwidth = "1280";
        break;
      case "9":
        optimizedwidth = "960";
        break;
      case "6":
        optimizedwidth = "722";
        break;
      case "3":
        optimizedwidth = "722";
        break;
      case "8":
        optimizedwidth = "960";
        break;
      case "4":
        optimizedwidth = "722";
        break;
    }

    string imageSrc = "/Admin/Public/GetImage.ashx?width=" + optimizedwidth + "&amp;crop=7&amp;Compression=75&amp;image=" + image;
    string optimizedheight = "";
    
    if(!GetBoolean("Item.KeepImageAspectRatio")){
      optimizedheight = ((Convert.ToInt32(optimizedwidth)/16)*9).ToString();
    }

    if(GetString("Item.ImageStyle") == "ball") {
      optimizedwidth = "500";
      optimizedheight = "500";
    }

    if(optimizedheight != "") {
      imageSrc = imageSrc + "&amp;height=" + optimizedheight;
    }
    
    
    if(string.IsNullOrEmpty(GetString("Item.Link")))
    {
      <div class="img-responsive dw-std-image">
        <img class="content-image img-responsive" width="@optimizedwidth" height="@optimizedheight" style="@GetImageBorderCss()" src="@imageSrc" alt=""/>
      </div>
    } else {     
      <div class="img-responsive dw-std-image">
        <img class="content-image img-responsive" width="@optimizedwidth" height="@optimizedheight" style="@GetImageBorderCss()" src="@imageSrc" alt=""/>
      </div>
    }
  }
}

@functions {
  private string GetImageBorderCss()
  {
    if (GetString("Item.ImageStyle") == "cover")
    {
      return "padding: 8px";
    }
    else if (GetString("Item.ImageStyle") == "cover-border")
    {
      return "padding: 4px; border: 1px solid #e1e1e1; border-radius: 0px !important";
    }
    else if (GetString("Item.ImageStyle") == "frame")
    {
      return "padding: 6px; border: 1px solid #e1e1e1; border-radius: 0px !important";
    }
    else if (GetString("Item.ImageStyle") == "rounded")
    {
      return "border-radius: 8px !important";
    }
    else if (GetString("Item.ImageStyle") == "ball")
    {
      return "border-radius: 1000px !important";
    }
    else if (GetString("Item.ImageStyle") == "shadow")
    {
      return "box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.2)";
    }
    else
    {
      return string.Empty;
    }
  }
}
